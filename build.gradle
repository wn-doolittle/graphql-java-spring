import java.text.SimpleDateFormat

def getDevelopmentVersion() {
    def output = new StringBuilder()
    def error = new StringBuilder()
    def gitShortHash = "git -C ${projectDir} rev-parse --short HEAD".execute()
    gitShortHash.waitForProcessOutput(output, error)
    def gitHash = output.toString().trim()
    if (gitHash.isEmpty()) {
        println "git hash is empty: error: ${error.toString()}"
        throw new IllegalStateException("git hash could not be determined")
    }
    new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date()) + "-" + gitHash
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

subprojects {

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'



    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    def releaseVersion = System.env.RELEASE_VERSION
    version = releaseVersion ? releaseVersion : getDevelopmentVersion()
    group = 'com.graphql-java'

    ext {
        graphqlJavaVersion = "12.0"
        springVersion = "5.1.7.RELEASE"
        springBootVersion = "2.1.5.RELEASE"
        jacksonVersion = "2.9.8"
        assertJVersion = "3.11.1"
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }


    task sourcesJar(type: Jar) {
        dependsOn classes
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {

        publications {

            graphqlJava(MavenPublication) {
                version version
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name project.name
                        description project.description
                        url "https://github.com/graphql-java/graphql-java-spring"
                        scm {
                            url "https://github.com/graphql-java/graphql-java-spring"
                            connection "https://github.com/graphql-java/graphql-java-spring"
                            developerConnection "https://github.com/graphql-java/graphql-java-spring"
                        }
                        licenses {
                            license {
                                name 'MIT'
                                url 'https://github.com/graphql-java/graphql-java-spring/blob/master/LICENSE.md'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'andimarek'
                                name 'Andreas Marek'
                            }
                        }
                    }
                }
            }
        }
    }


    bintray {
        user = System.env.BINTRAY_USER ?: project["bintray.user"]
        key = System.env.BINTRAY_API_KEY ?: project["bintray.key"]
        publications = ['graphqlJava']
        publish = true
        pkg {
            repo = 'graphql-java'
            name = project.name
            desc = project.description
            licenses = ['MIT']
            vcsUrl = 'https://github.com/graphql-java/graphql-java-spring'

            version {
                name = project.version
                desc = project.description
                released = new Date()
                vcsTag = 'v' + project.version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = true
                    user = System.env.MAVEN_CENTRAL_USER
                    password = System.env.MAVEN_CENTRAL_PASSWORD
                    close = '1'
                }
            }
        }
    }

// all publish tasks depend on the build task
    tasks.withType(PublishToMavenRepository) {
        dependsOn build
    }

}

task myWrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

